/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package pascal.taie.intellij.tir.syntax;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import pascal.taie.intellij.tir.syntax.TirTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/Users/xlor/Repos/intellij-tai-e/src/main/kotlin/pascal/taie/intellij/tir/syntax/Tir.flex</tt>
 */
class TirLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 3872 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>12]<<6)|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\7\3\1\4\4\3\1\5\1\6\1\7\4\3\1\10\6\3\1\11\1\12\361\3");

  /* The ZZ_CMAP_Y table has 704 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\26\3\1\4\1\3\1\5\3\3\1\6\5\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\10\1\3\1\10\1\4\4\3\1\6"+
    "\1\10\34\3\1\4\1\10\4\3\1\11\1\3\1\10\2\3\1\12\2\3\1\10\1\5\2\3\1\12\16\3"+
    "\1\13\227\3\1\4\12\3\1\10\1\6\2\3\1\14\1\3\1\10\5\3\1\5\114\3\1\10\25\3\1"+
    "\4\56\3\1\7\1\3\1\5\1\15\2\3\1\10\3\3\1\5\5\3\1\10\1\3\1\10\5\3\1\10\1\3\1"+
    "\6\1\5\6\3\1\4\15\3\1\10\67\3\1\4\3\3\1\10\61\3\1\16\105\3\1\10\32\3");

  /* The ZZ_CMAP_A table has 960 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\1\1\1\5\1\3\22\0\1\4\1\54\1\50\1\0\1\11\1\7\1\57\1\0\1\60\1"+
    "\61\1\52\1\43\1\40\1\44\1\46\1\6\12\10\1\41\1\42\1\55\1\53\1\56\1\0\1\66\5"+
    "\11\1\47\5\11\1\67\16\11\1\62\1\51\1\63\1\57\1\11\1\0\1\15\1\24\1\21\1\31"+
    "\1\27\1\12\1\34\1\37\1\13\2\11\1\16\1\33\1\14\1\30\1\22\1\11\1\25\1\17\1\20"+
    "\1\23\1\26\1\35\1\32\1\36\1\11\1\64\1\57\1\65\1\57\6\0\1\1\232\0\12\45\106"+
    "\0\12\45\6\0\12\45\134\0\12\45\40\0\12\45\54\0\12\45\60\0\12\45\6\0\12\45"+
    "\116\0\2\1\46\0\12\45\26\0\12\45\74\0\12\45\16\0\62\45");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\15\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\1\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\2\31\1\3\1\4\14\1\1\20\1\32"+
    "\2\0\1\6\1\33\3\6\1\34\14\6\1\0\1\35"+
    "\1\0\1\36\1\0\2\22\2\0\1\33\3\0\1\34"+
    "\14\0\1\37\3\6\1\40\2\6\1\41\14\6\4\0"+
    "\1\40\2\0\1\41\13\0\11\6\1\36\5\6\1\42"+
    "\17\0\1\42\1\43\5\6\1\44\1\45\1\46\5\6"+
    "\2\0\1\43\5\0\1\44\1\45\1\46\5\0\6\6"+
    "\1\47\2\6\1\50\7\0\1\47\2\0\5\6\1\51"+
    "\5\0\1\51\2\6\1\52\2\6\2\0\1\52\2\0"+
    "\2\6\2\0\1\53\1\54\1\53\1\54";

  private static int [] zzUnpackAction() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0118"+
    "\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310"+
    "\0\u0348\0\u0380\0\u03b8\0\u03f0\0\160\0\160\0\160\0\u0428"+
    "\0\u0428\0\160\0\u0460\0\160\0\u0498\0\u0498\0\u04d0\0\u0508"+
    "\0\160\0\160\0\160\0\u0540\0\160\0\160\0\160\0\250"+
    "\0\u0578\0\160\0\160\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u0690"+
    "\0\u06c8\0\u0700\0\u0738\0\u0770\0\u07a8\0\u07e0\0\u0818\0\u0850"+
    "\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0118\0\u0968\0\u09a0\0\u09d8"+
    "\0\u0118\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\u0b60"+
    "\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0460\0\160\0\u0cb0"+
    "\0\160\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8\0\160\0\u0e00"+
    "\0\u0e38\0\u0e70\0\160\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\u0f88"+
    "\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u1110\0\160"+
    "\0\u1148\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u0118\0\u1298"+
    "\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u1458"+
    "\0\u1490\0\u14c8\0\160\0\u1500\0\u1538\0\u1570\0\u15a8\0\u15e0"+
    "\0\u1618\0\u1650\0\160\0\u1688\0\u16c0\0\u16f8\0\u1730\0\u1768"+
    "\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880\0\u18b8\0\u18f0\0\u1928"+
    "\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u1a40\0\u1a78\0\u1ab0\0\u0118"+
    "\0\u1ae8\0\u1b20\0\u1b58\0\u1b90\0\u1bc8\0\u0118\0\u1c00\0\u1c38"+
    "\0\u1c70\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50\0\u1d88\0\u1dc0\0\u1df8"+
    "\0\u1e30\0\u1e68\0\u1ea0\0\u1ed8\0\u1f10\0\160\0\u0118\0\u1f48"+
    "\0\u1f80\0\u1fb8\0\u1ff0\0\u2028\0\u0118\0\u0118\0\u0118\0\u2060"+
    "\0\u2098\0\u20d0\0\u2108\0\u2140\0\u2178\0\u21b0\0\160\0\u21e8"+
    "\0\u2220\0\u2258\0\u2290\0\u22c8\0\160\0\160\0\160\0\u2300"+
    "\0\u2338\0\u2370\0\u23a8\0\u23e0\0\u2418\0\u2450\0\u2488\0\u24c0"+
    "\0\u24f8\0\u2530\0\u0118\0\u2568\0\u25a0\0\160\0\u25d8\0\u2610"+
    "\0\u2648\0\u2680\0\u26b8\0\u26f0\0\u2728\0\160\0\u2760\0\u2798"+
    "\0\u27d0\0\u2808\0\u2840\0\u2878\0\u28b0\0\u0118\0\u28e8\0\u2920"+
    "\0\u2958\0\u2990\0\u29c8\0\160\0\u2a00\0\u2a38\0\u0118\0\u2a70"+
    "\0\u2aa8\0\u2ae0\0\u2b18\0\160\0\u2b50\0\u2b88\0\u2bc0\0\u2bf8"+
    "\0\u2c30\0\u2c68\0\u0118\0\u0118\0\160\0\160";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\5\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\10\1\15\1\16\1\17\1\20\2\10"+
    "\1\21\1\22\1\23\4\10\1\24\3\10\1\25\1\26"+
    "\1\27\1\30\1\31\1\7\1\32\1\10\1\33\1\3"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\3\1\10\1\3\1\4"+
    "\1\50\1\4\1\51\1\50\1\52\1\53\1\7\1\3"+
    "\1\54\1\55\1\56\1\57\1\3\1\60\1\61\1\62"+
    "\1\63\2\3\1\64\1\65\1\66\4\3\1\67\3\3"+
    "\1\25\1\26\1\27\1\30\1\31\1\7\1\32\1\3"+
    "\1\33\1\3\1\34\1\35\1\36\1\70\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\2\3\71\0"+
    "\5\4\70\0\1\71\71\0\30\10\4\0\1\10\1\0"+
    "\1\72\1\10\17\0\1\10\10\0\1\7\34\0\1\7"+
    "\1\73\31\0\3\10\1\74\24\10\4\0\1\10\1\0"+
    "\1\72\1\10\17\0\1\10\10\0\2\10\1\75\1\10"+
    "\1\76\16\10\1\77\4\10\4\0\1\10\1\0\1\72"+
    "\1\10\17\0\1\10\10\0\17\10\1\100\10\10\4\0"+
    "\1\10\1\0\1\72\1\10\17\0\1\10\10\0\10\10"+
    "\1\101\17\10\4\0\1\10\1\0\1\72\1\10\17\0"+
    "\1\10\10\0\10\10\1\102\17\10\4\0\1\10\1\0"+
    "\1\72\1\10\17\0\1\10\10\0\15\10\1\103\11\10"+
    "\1\104\4\0\1\10\1\0\1\72\1\10\17\0\1\10"+
    "\10\0\5\10\1\105\1\106\14\10\1\107\4\10\4\0"+
    "\1\10\1\0\1\72\1\10\17\0\1\10\10\0\13\10"+
    "\1\110\1\10\1\111\12\10\4\0\1\10\1\0\1\72"+
    "\1\10\17\0\1\10\10\0\17\10\1\112\10\10\4\0"+
    "\1\10\1\0\1\72\1\10\17\0\1\10\10\0\20\10"+
    "\1\113\7\10\4\0\1\10\1\0\1\72\1\10\17\0"+
    "\1\10\10\0\22\10\1\114\5\10\4\0\1\10\1\0"+
    "\1\72\1\10\17\0\1\10\10\0\20\10\1\115\7\10"+
    "\4\0\1\10\1\0\1\72\1\10\17\0\1\10\10\0"+
    "\1\7\34\0\1\7\22\0\50\116\1\117\1\120\16\116"+
    "\53\0\1\121\23\0\1\122\1\0\27\122\7\0\1\122"+
    "\3\0\1\121\1\0\1\123\11\0\1\122\53\0\1\121"+
    "\2\0\1\124\21\0\1\125\34\0\1\125\23\0\1\4"+
    "\1\51\1\4\2\51\75\0\1\126\66\0\1\127\1\0"+
    "\1\130\16\0\1\131\63\0\1\132\60\0\1\133\67\0"+
    "\1\134\74\0\1\135\11\0\1\136\45\0\1\137\1\140"+
    "\14\0\1\141\57\0\1\142\1\0\1\143\71\0\1\144"+
    "\70\0\1\145\71\0\1\146\65\0\1\147\112\0\1\121"+
    "\1\0\1\123\12\0\2\71\2\0\64\71\7\0\1\10"+
    "\1\0\27\10\7\0\1\10\17\0\1\10\10\0\1\73"+
    "\34\0\1\73\1\0\1\150\30\0\4\10\1\151\23\10"+
    "\4\0\1\10\1\0\1\72\1\10\17\0\1\10\10\0"+
    "\7\10\1\152\20\10\4\0\1\10\1\0\1\72\1\10"+
    "\17\0\1\10\10\0\12\10\1\153\15\10\4\0\1\10"+
    "\1\0\1\72\1\10\17\0\1\10\10\0\25\10\1\154"+
    "\2\10\4\0\1\10\1\0\1\72\1\10\17\0\1\10"+
    "\10\0\5\10\1\155\22\10\4\0\1\10\1\0\1\72"+
    "\1\10\17\0\1\10\10\0\5\10\1\156\20\10\1\157"+
    "\1\10\4\0\1\10\1\0\1\72\1\10\17\0\1\10"+
    "\10\0\15\10\1\160\12\10\4\0\1\10\1\0\1\72"+
    "\1\10\17\0\1\10\10\0\10\10\1\161\17\10\4\0"+
    "\1\10\1\0\1\72\1\10\17\0\1\10\10\0\5\10"+
    "\1\162\22\10\4\0\1\10\1\0\1\72\1\10\17\0"+
    "\1\10\10\0\12\10\1\163\15\10\4\0\1\10\1\0"+
    "\1\72\1\10\17\0\1\10\10\0\14\10\1\164\13\10"+
    "\4\0\1\10\1\0\1\72\1\10\17\0\1\10\10\0"+
    "\3\10\1\165\14\10\1\166\7\10\4\0\1\10\1\0"+
    "\1\72\1\10\17\0\1\10\10\0\10\10\1\167\17\10"+
    "\4\0\1\10\1\0\1\72\1\10\17\0\1\10\10\0"+
    "\6\10\1\170\21\10\4\0\1\10\1\0\1\72\1\10"+
    "\17\0\1\10\10\0\10\10\1\171\17\10\4\0\1\10"+
    "\1\0\1\72\1\10\17\0\1\10\10\0\10\10\1\172"+
    "\17\10\4\0\1\10\1\0\1\72\1\10\17\0\1\10"+
    "\1\116\3\0\1\116\1\0\62\116\10\0\30\122\4\0"+
    "\1\122\2\0\1\122\6\0\1\173\10\0\1\122\55\0"+
    "\1\41\70\0\1\41\21\0\1\125\34\0\1\125\20\0"+
    "\1\174\15\0\1\175\72\0\1\176\72\0\1\177\102\0"+
    "\1\200\47\0\1\201\67\0\1\202\20\0\1\203\56\0"+
    "\1\204\62\0\1\205\64\0\1\206\74\0\1\207\71\0"+
    "\1\210\56\0\1\211\14\0\1\212\57\0\1\213\65\0"+
    "\1\214\71\0\1\215\67\0\1\216\57\0\5\10\1\217"+
    "\22\10\4\0\1\10\1\0\1\72\1\10\17\0\1\10"+
    "\10\0\10\10\1\220\17\10\4\0\1\10\1\0\1\72"+
    "\1\10\17\0\1\10\10\0\6\10\1\221\21\10\4\0"+
    "\1\10\1\0\1\72\1\10\17\0\1\10\10\0\5\10"+
    "\1\222\22\10\4\0\1\10\1\0\1\72\1\10\17\0"+
    "\1\10\10\0\10\10\1\223\17\10\4\0\1\10\1\0"+
    "\1\72\1\10\17\0\1\10\10\0\4\10\1\224\23\10"+
    "\4\0\1\10\1\0\1\72\1\10\17\0\1\10\10\0"+
    "\20\10\1\225\7\10\4\0\1\10\1\0\1\72\1\10"+
    "\17\0\1\10\10\0\11\10\1\226\16\10\4\0\1\10"+
    "\1\0\1\72\1\10\17\0\1\10\10\0\7\10\1\227"+
    "\20\10\4\0\1\10\1\0\1\72\1\10\17\0\1\10"+
    "\10\0\24\10\1\230\3\10\4\0\1\10\1\0\1\72"+
    "\1\10\17\0\1\10\10\0\6\10\1\223\21\10\4\0"+
    "\1\10\1\0\1\72\1\10\17\0\1\10\10\0\16\10"+
    "\1\231\11\10\4\0\1\10\1\0\1\72\1\10\17\0"+
    "\1\10\10\0\10\10\1\232\17\10\4\0\1\10\1\0"+
    "\1\72\1\10\17\0\1\10\10\0\13\10\1\233\14\10"+
    "\4\0\1\10\1\0\1\72\1\10\17\0\1\10\10\0"+
    "\5\10\1\234\22\10\4\0\1\10\1\0\1\72\1\10"+
    "\17\0\1\10\10\0\17\10\1\235\10\10\4\0\1\10"+
    "\1\0\1\72\1\10\17\0\1\10\10\0\20\10\1\236"+
    "\7\10\4\0\1\10\1\0\1\72\1\10\17\0\1\10"+
    "\67\0\1\237\15\0\1\240\72\0\1\241\65\0\1\242"+
    "\66\0\1\243\72\0\1\244\63\0\1\245\103\0\1\246"+
    "\60\0\1\247\65\0\1\250\104\0\1\121\51\0\1\244"+
    "\77\0\1\251\61\0\1\252\72\0\1\253\61\0\1\254"+
    "\101\0\1\255\70\0\1\256\47\0\6\10\1\257\21\10"+
    "\4\0\1\10\1\0\1\72\1\10\17\0\1\10\10\0"+
    "\5\10\1\260\22\10\4\0\1\10\1\0\1\72\1\10"+
    "\17\0\1\10\10\0\17\10\1\261\10\10\4\0\1\10"+
    "\1\0\1\72\1\10\17\0\1\10\10\0\15\10\1\262"+
    "\12\10\4\0\1\10\1\0\1\72\1\10\17\0\1\10"+
    "\10\0\3\10\1\263\24\10\4\0\1\10\1\0\1\72"+
    "\1\10\17\0\1\10\10\0\7\10\1\264\20\10\4\0"+
    "\1\10\1\0\1\72\1\10\17\0\1\10\10\0\25\10"+
    "\1\265\2\10\4\0\1\10\1\0\1\72\1\10\17\0"+
    "\1\10\10\0\27\10\1\266\4\0\1\10\1\0\1\72"+
    "\1\10\17\0\1\10\10\0\7\10\1\267\20\10\4\0"+
    "\1\10\1\0\1\72\1\10\17\0\1\10\10\0\5\10"+
    "\1\270\22\10\4\0\1\10\1\0\1\72\1\10\17\0"+
    "\1\10\10\0\17\10\1\271\10\10\4\0\1\10\1\0"+
    "\1\72\1\10\17\0\1\10\10\0\15\10\1\272\12\10"+
    "\4\0\1\10\1\0\1\72\1\10\17\0\1\10\10\0"+
    "\10\10\1\273\17\10\4\0\1\10\1\0\1\72\1\10"+
    "\17\0\1\10\10\0\4\10\1\274\23\10\4\0\1\10"+
    "\1\0\1\72\1\10\17\0\1\10\10\0\1\275\33\0"+
    "\1\276\1\275\40\0\1\277\66\0\1\300\101\0\1\301"+
    "\65\0\1\302\55\0\1\303\73\0\1\304\105\0\1\305"+
    "\71\0\1\306\47\0\1\307\65\0\1\310\101\0\1\311"+
    "\65\0\1\312\62\0\1\313\63\0\1\314\63\0\4\10"+
    "\1\315\23\10\4\0\1\10\1\0\1\72\1\10\17\0"+
    "\1\10\10\0\23\10\1\316\4\10\4\0\1\10\1\0"+
    "\1\72\1\10\17\0\1\10\10\0\15\10\1\317\12\10"+
    "\4\0\1\10\1\0\1\72\1\10\17\0\1\10\10\0"+
    "\11\10\1\257\16\10\4\0\1\10\1\0\1\72\1\10"+
    "\17\0\1\10\10\0\3\10\1\320\24\10\4\0\1\10"+
    "\1\0\1\72\1\10\17\0\1\10\10\0\10\10\1\321"+
    "\17\10\4\0\1\10\1\0\1\72\1\10\17\0\1\10"+
    "\10\0\11\10\1\322\16\10\4\0\1\10\1\0\1\72"+
    "\1\10\17\0\1\10\10\0\4\10\1\323\23\10\4\0"+
    "\1\10\1\0\1\72\1\10\17\0\1\10\10\0\3\10"+
    "\1\324\24\10\4\0\1\10\1\0\1\72\1\10\17\0"+
    "\1\10\10\0\21\10\1\325\6\10\4\0\1\10\1\0"+
    "\1\72\1\10\17\0\1\10\10\0\1\275\33\0\1\276"+
    "\1\275\15\0\1\326\14\0\1\327\34\0\1\327\36\0"+
    "\1\330\106\0\1\331\61\0\1\332\63\0\1\277\61\0"+
    "\1\333\74\0\1\334\70\0\1\335\62\0\1\336\66\0"+
    "\1\337\105\0\1\340\46\0\11\10\1\341\16\10\4\0"+
    "\1\10\1\0\1\72\1\10\17\0\1\10\10\0\17\10"+
    "\1\342\10\10\4\0\1\10\1\0\1\72\1\10\17\0"+
    "\1\10\10\0\5\10\1\343\22\10\4\0\1\10\1\0"+
    "\1\72\1\10\17\0\1\10\10\0\17\10\1\344\10\10"+
    "\4\0\1\10\1\0\1\72\1\10\17\0\1\10\10\0"+
    "\17\10\1\257\10\10\4\0\1\10\1\0\1\72\1\10"+
    "\17\0\1\10\10\0\10\10\1\345\17\10\4\0\1\10"+
    "\1\0\1\72\1\10\17\0\1\10\10\0\6\10\1\321"+
    "\21\10\4\0\1\10\1\0\1\72\1\10\17\0\1\10"+
    "\10\0\7\10\1\346\20\10\4\0\1\10\1\0\1\72"+
    "\1\10\17\0\1\10\10\0\1\327\34\0\1\327\15\0"+
    "\1\326\25\0\1\347\75\0\1\350\55\0\1\351\101\0"+
    "\1\352\67\0\1\277\60\0\1\353\65\0\1\334\70\0"+
    "\1\354\60\0\17\10\1\355\10\10\4\0\1\10\1\0"+
    "\1\72\1\10\17\0\1\10\10\0\4\10\1\356\23\10"+
    "\4\0\1\10\1\0\1\72\1\10\17\0\1\10\10\0"+
    "\26\10\1\357\1\10\4\0\1\10\1\0\1\72\1\10"+
    "\17\0\1\10\10\0\4\10\1\360\23\10\4\0\1\10"+
    "\1\0\1\72\1\10\17\0\1\10\10\0\17\10\1\361"+
    "\10\10\4\0\1\10\1\0\1\72\1\10\17\0\1\10"+
    "\27\0\1\362\54\0\1\363\111\0\1\364\45\0\1\365"+
    "\102\0\1\366\50\0\20\10\1\367\7\10\4\0\1\10"+
    "\1\0\1\72\1\10\17\0\1\10\10\0\10\10\1\370"+
    "\17\10\4\0\1\10\1\0\1\72\1\10\17\0\1\10"+
    "\10\0\10\10\1\257\17\10\4\0\1\10\1\0\1\72"+
    "\1\10\17\0\1\10\10\0\21\10\1\257\6\10\4\0"+
    "\1\10\1\0\1\72\1\10\17\0\1\10\30\0\1\371"+
    "\57\0\1\372\67\0\1\277\100\0\1\277\46\0\2\10"+
    "\1\373\25\10\4\0\1\10\1\0\1\72\1\10\17\0"+
    "\1\10\10\0\7\10\1\374\20\10\4\0\1\10\1\0"+
    "\1\72\1\10\17\0\1\10\12\0\1\375\74\0\1\376"+
    "\50\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11424];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\21\1\3\11\2\1\1\11\1\1\1\11"+
    "\4\1\3\11\1\1\3\11\2\1\2\11\16\1\2\0"+
    "\22\1\1\0\1\11\1\0\1\11\1\0\2\1\2\0"+
    "\1\11\3\0\1\11\14\0\1\11\22\1\1\11\4\0"+
    "\1\1\2\0\1\11\13\0\20\1\17\0\1\11\16\1"+
    "\2\0\1\11\5\0\3\11\5\0\11\1\1\11\7\0"+
    "\1\11\2\0\6\1\5\0\1\11\5\1\2\0\1\11"+
    "\2\0\2\1\2\0\2\1\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  TirLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 45: break;
          case 2: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 46: break;
          case 3: 
            { yybegin(YYINITIAL); return TirTypes.DIV_OP;
            } 
            // fall through
          case 47: break;
          case 4: 
            { yybegin(YYINITIAL); return TirTypes.MOD_OP;
            } 
            // fall through
          case 48: break;
          case 5: 
            { yybegin(YYINITIAL); return TirTypes.INTEGER;
            } 
            // fall through
          case 49: break;
          case 6: 
            { yybegin(YYINITIAL); return TirTypes.IDENTIFIER;
            } 
            // fall through
          case 50: break;
          case 7: 
            { yybegin(YYINITIAL); return TirTypes.COMMA;
            } 
            // fall through
          case 51: break;
          case 8: 
            { yybegin(YYINITIAL); return TirTypes.COLON;
            } 
            // fall through
          case 52: break;
          case 9: 
            { yybegin(YYINITIAL); return TirTypes.SEMICOLON;
            } 
            // fall through
          case 53: break;
          case 10: 
            { yybegin(YYINITIAL); return TirTypes.ADD_OP;
            } 
            // fall through
          case 54: break;
          case 11: 
            { yybegin(YYINITIAL); return TirTypes.SUB_OP;
            } 
            // fall through
          case 55: break;
          case 12: 
            { yybegin(YYINITIAL); return TirTypes.DOT;
            } 
            // fall through
          case 56: break;
          case 13: 
            { yybegin(YYINITIAL); return TirTypes.MUL_OP;
            } 
            // fall through
          case 57: break;
          case 14: 
            { yybegin(YYINITIAL); return TirTypes.EQUAL;
            } 
            // fall through
          case 58: break;
          case 15: 
            { yybegin(YYINITIAL); return TirTypes.NOT_OP;
            } 
            // fall through
          case 59: break;
          case 16: 
            { yybegin(YYINITIAL); return TirTypes.LANGLE;
            } 
            // fall through
          case 60: break;
          case 17: 
            { yybegin(YYINITIAL); return TirTypes.RANGLE;
            } 
            // fall through
          case 61: break;
          case 18: 
            { yybegin(YYINITIAL); return TirTypes.BIT_OP;
            } 
            // fall through
          case 62: break;
          case 19: 
            { yybegin(YYINITIAL); return TirTypes.LPAREN;
            } 
            // fall through
          case 63: break;
          case 20: 
            { yybegin(YYINITIAL); return TirTypes.RPAREN;
            } 
            // fall through
          case 64: break;
          case 21: 
            { yybegin(YYINITIAL); return TirTypes.LBRACKET;
            } 
            // fall through
          case 65: break;
          case 22: 
            { yybegin(YYINITIAL); return TirTypes.RBRACKET;
            } 
            // fall through
          case 66: break;
          case 23: 
            { yybegin(YYINITIAL); return TirTypes.LBRACE;
            } 
            // fall through
          case 67: break;
          case 24: 
            { yybegin(YYINITIAL); return TirTypes.RBRACE;
            } 
            // fall through
          case 68: break;
          case 25: 
            { yybegin(WAITING_VALUE); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 69: break;
          case 26: 
            { yybegin(YYINITIAL); return TirTypes.COMMENT;
            } 
            // fall through
          case 70: break;
          case 27: 
            { yybegin(YYINITIAL); return TirTypes.IF;
            } 
            // fall through
          case 71: break;
          case 28: 
            { yybegin(YYINITIAL); return TirTypes.AT;
            } 
            // fall through
          case 72: break;
          case 29: 
            { yybegin(YYINITIAL); return TirTypes.STRING_LITERAL;
            } 
            // fall through
          case 73: break;
          case 30: 
            { yybegin(YYINITIAL); return TirTypes.CMP_OP;
            } 
            // fall through
          case 74: break;
          case 31: 
            { yybegin(YYINITIAL); return TirTypes.FLOAT;
            } 
            // fall through
          case 75: break;
          case 32: 
            { yybegin(YYINITIAL); return TirTypes.NEW;
            } 
            // fall through
          case 76: break;
          case 33: 
            { yybegin(YYINITIAL); return TirTypes.TRY;
            } 
            // fall through
          case 77: break;
          case 34: 
            { yybegin(YYINITIAL); return TirTypes.GOTO;
            } 
            // fall through
          case 78: break;
          case 35: 
            { yybegin(YYINITIAL); return TirTypes.MODIFIER;
            } 
            // fall through
          case 79: break;
          case 36: 
            { yybegin(YYINITIAL); return TirTypes.THROW;
            } 
            // fall through
          case 80: break;
          case 37: 
            { yybegin(YYINITIAL); return TirTypes.CATCH;
            } 
            // fall through
          case 81: break;
          case 38: 
            { yybegin(YYINITIAL); return TirTypes.CLASS;
            } 
            // fall through
          case 82: break;
          case 39: 
            { yybegin(YYINITIAL); return TirTypes.RETURN;
            } 
            // fall through
          case 83: break;
          case 40: 
            { yybegin(YYINITIAL); return TirTypes.LINE_NUMBER;
            } 
            // fall through
          case 84: break;
          case 41: 
            { yybegin(YYINITIAL); return TirTypes.EXTENDS;
            } 
            // fall through
          case 85: break;
          case 42: 
            { yybegin(YYINITIAL); return TirTypes.NEW_ARRAY;
            } 
            // fall through
          case 86: break;
          case 43: 
            { yybegin(YYINITIAL); return TirTypes.INSTANCEOF;
            } 
            // fall through
          case 87: break;
          case 44: 
            { yybegin(YYINITIAL); return TirTypes.IMPLEMENTS;
            } 
            // fall through
          case 88: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
