{
  parserClass="pascal.taie.intellij.tir.syntax.TirParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Tir"
  psiImplClassSuffix="Impl"
  psiPackage="pascal.taie.intellij.tir.syntax.psi"
  psiImplPackage="pascal.taie.intellij.tir.syntax.psi.impl"

  elementTypeHolderClass="pascal.taie.intellij.tir.syntax.TirTypes"
  elementTypeClass="pascal.taie.intellij.tir.syntax.TirElementType"
  tokenTypeClass="pascal.taie.intellij.tir.syntax.TirTokenType"
}

tir_file ::= MODIFIER* CLASS IDENTIFIER class_extends? class_implements? LBRACE class_member* RBRACE

class_extends ::= EXTENDS identifier_list

class_implements ::= IMPLEMENTS identifier_list

class_member ::= field_def | method_def | COMMENT

// Field def
field_def ::= MODIFIER* identifier_type field_identifier_list SEMICOLON

field_identifier_list ::= field_identifier (COMMA field_identifier)*

field_identifier ::= IDENTIFIER
// ---

// Method def
method_def ::= method_sig LBRACE method_body RBRACE

method_sig ::= MODIFIER* identifier_type identifier_method LPAREN (identifier_type IDENTIFIER (COMMA identifier_type IDENTIFIER)*)? RPAREN

method_body ::= (method_body_var | method_body_line | method_body_catch)+

method_body_var ::= identifier_type identifier_list SEMICOLON

method_body_line ::= LINE_NUMBER method_body_stmt SEMICOLON

method_body_catch ::= TRY LBRACKET INTEGER COMMA INTEGER RPAREN COMMA CATCH IDENTIFIER AT INTEGER

// copy stmts and more
method_body_stmt ::= lvalue EQUAL rvalue
                   | IDENTIFIER EQUAL NEW identifier_type
                   | IDENTIFIER EQUAL NEW_ARRAY identifier_type LBRACKET IDENTIFIER RBRACKET
                   | THROW identifier_type
                   | CATCH IDENTIFIER
                   | invoke_expr
                   | IF LPAREN (unary_expr | binary_expr | IDENTIFIER) RPAREN GOTO INTEGER
                   | GOTO INTEGER
                   | RETURN IDENTIFIER?

lvalue ::= IDENTIFIER DOT LANGLE field_ref RANGLE
         | IDENTIFIER LBRACKET IDENTIFIER RBRACKET
         | IDENTIFIER

rvalue ::= IDENTIFIER DOT LANGLE field_ref RANGLE
         | IDENTIFIER LBRACKET IDENTIFIER RBRACKET
         | LPAREN identifier_type RPAREN IDENTIFIER
         | invoke_expr
         | unary_expr
         | binary_expr
         | IDENTIFIER INSTANCEOF identifier_type
         | IDENTIFIER
         | FLOAT
         | INTEGER
         | STRING_LITERAL

field_ref ::= IDENTIFIER COLON identifier_type IDENTIFIER

unary_expr ::= (ADD_OP | SUB_OP | NOT_OP) IDENTIFIER

binary_expr ::= IDENTIFIER (LANGLE | RANGLE | CMP_OP | BIT_OP | ADD_OP | SUB_OP | MUL_OP | DIV_OP | MOD_OP) IDENTIFIER

// invoke method
invoke_expr ::= IDENTIFIER (IDENTIFIER DOT)? LANGLE invoke_method_ref RANGLE LPAREN invoke_argument_list? RPAREN

invoke_method_ref ::= IDENTIFIER COLON identifier_type IDENTIFIER LPAREN (identifier_type (COMMA identifier_type)*)? RPAREN

invoke_argument_list ::= IDENTIFIER (COMMA IDENTIFIER)*
// ---

// helpers
identifier_type ::= IDENTIFIER (LBRACKET RBRACKET)?

identifier_method ::= IDENTIFIER

identifier_list ::= IDENTIFIER (COMMA IDENTIFIER)*
