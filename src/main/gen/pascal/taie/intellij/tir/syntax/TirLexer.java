/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package pascal.taie.intellij.tir.syntax;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import pascal.taie.intellij.tir.syntax.TirTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/Users/xlor/Repos/intellij-tai-e/src/main/kotlin/pascal/taie/intellij/tir/syntax/Tir.flex</tt>
 */
class TirLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 3872 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>12]<<6)|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\7\3\1\4\4\3\1\5\1\6\1\7\4\3\1\10\6\3\1\11\1\12\361\3");

  /* The ZZ_CMAP_Y table has 704 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\26\3\1\4\1\3\1\5\3\3\1\6\5\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\10\1\3\1\10\1\4\4\3\1\6"+
    "\1\10\34\3\1\4\1\10\4\3\1\11\1\3\1\10\2\3\1\12\2\3\1\10\1\5\2\3\1\12\16\3"+
    "\1\13\227\3\1\4\12\3\1\10\1\6\2\3\1\14\1\3\1\10\5\3\1\5\114\3\1\10\25\3\1"+
    "\4\56\3\1\7\1\3\1\5\1\15\2\3\1\10\3\3\1\5\5\3\1\10\1\3\1\10\5\3\1\10\1\3\1"+
    "\6\1\5\6\3\1\4\15\3\1\10\67\3\1\4\3\3\1\10\61\3\1\16\105\3\1\10\32\3");

  /* The ZZ_CMAP_A table has 960 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\1\1\1\5\1\3\22\0\1\4\3\0\1\11\1\7\2\0\1\37\1\40\2\0\1\34\1\10"+
    "\1\51\1\6\12\46\1\0\1\35\1\52\1\36\1\53\1\0\1\47\13\11\1\50\16\11\1\41\1\0"+
    "\1\42\1\0\1\11\1\0\1\15\1\24\1\21\1\31\1\27\1\12\2\11\1\13\2\11\1\16\1\33"+
    "\1\14\1\30\1\22\1\11\1\25\1\17\1\20\1\23\1\26\1\11\1\32\2\11\1\43\1\0\1\44"+
    "\7\0\1\1\232\0\12\45\106\0\12\45\6\0\12\45\134\0\12\45\40\0\12\45\54\0\12"+
    "\45\60\0\12\45\6\0\12\45\116\0\2\1\46\0\12\45\26\0\12\45\74\0\12\45\16\0\62"+
    "\45");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\1\11\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\1\2\15"+
    "\10\1\1\16\1\0\11\3\13\0\12\3\1\0\1\3"+
    "\12\0\11\3\12\0\1\17\3\3\1\20\4\3\2\0"+
    "\1\17\3\0\1\20\4\0\6\3\1\0\1\21\6\0"+
    "\3\3\1\22\3\0\1\22\3\3\3\0\1\3\1\0"+
    "\2\23";

  private static int [] zzUnpackAction() {
    int [] result = new int[149];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\130\0\130"+
    "\0\130\0\130\0\130\0\u0268\0\130\0\130\0\130\0\u0294"+
    "\0\204\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\u039c\0\u03c8"+
    "\0\u03f4\0\u0420\0\u044c\0\u0478\0\u04a4\0\u04d0\0\u04fc\0\u0528"+
    "\0\u0554\0\u0580\0\u05ac\0\u05d8\0\u0604\0\u0630\0\u065c\0\u0688"+
    "\0\u06b4\0\u06e0\0\u070c\0\u0738\0\u0764\0\u0790\0\u07bc\0\u07e8"+
    "\0\u0814\0\u0840\0\u086c\0\u0898\0\u08c4\0\u08f0\0\u091c\0\u0948"+
    "\0\u0974\0\u09a0\0\u09cc\0\130\0\u09f8\0\u0a24\0\u0a50\0\u0a7c"+
    "\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58\0\u0b84\0\u0bb0\0\u0bdc"+
    "\0\u0c08\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8\0\u0ce4\0\u0d10\0\u0d3c"+
    "\0\u0d68\0\u0d94\0\u0dc0\0\u0dec\0\u0e18\0\u0e44\0\u0e70\0\u0e9c"+
    "\0\u0ec8\0\334\0\u0ef4\0\u0f20\0\u0f4c\0\334\0\u0f78\0\u0fa4"+
    "\0\u0fd0\0\u0ffc\0\u1028\0\u1054\0\130\0\u1080\0\u10ac\0\u10d8"+
    "\0\130\0\u1104\0\u1130\0\u115c\0\u1188\0\u11b4\0\u11e0\0\u120c"+
    "\0\u1238\0\u1264\0\u1290\0\u12bc\0\130\0\u12e8\0\u1314\0\u1340"+
    "\0\u136c\0\u1398\0\u13c4\0\u13f0\0\u141c\0\u1448\0\334\0\u1474"+
    "\0\u14a0\0\u14cc\0\130\0\u14f8\0\u1524\0\u1550\0\u157c\0\u15a8"+
    "\0\u15d4\0\u1600\0\u162c\0\334\0\130";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[149];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\5\4\1\5\1\6\1\3\1\6\1\7\1\10"+
    "\3\6\1\11\1\12\1\13\1\14\3\6\1\15\1\16"+
    "\4\6\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\3\3\1\6\1\3\1\30\2\3\1\4"+
    "\1\31\1\4\1\32\1\31\4\3\1\33\1\34\3\3"+
    "\1\35\1\36\1\37\1\40\3\3\1\41\1\42\4\3"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\7\3\55\0\5\4\54\0\1\43\55\0\24\6"+
    "\12\0\1\6\1\0\1\6\1\44\12\0\3\6\1\45"+
    "\20\6\12\0\1\6\1\0\1\6\1\44\12\0\23\6"+
    "\1\46\12\0\1\6\1\0\1\6\1\44\12\0\10\6"+
    "\1\47\13\6\12\0\1\6\1\0\1\6\1\44\12\0"+
    "\15\6\1\50\6\6\12\0\1\6\1\0\1\6\1\44"+
    "\12\0\6\6\1\51\15\6\12\0\1\6\1\0\1\6"+
    "\1\44\12\0\13\6\1\52\1\6\1\53\6\6\12\0"+
    "\1\6\1\0\1\6\1\44\12\0\20\6\1\54\3\6"+
    "\12\0\1\6\1\0\1\6\1\44\12\0\22\6\1\55"+
    "\1\6\12\0\1\6\1\0\1\6\1\44\47\0\2\56"+
    "\14\0\1\57\1\0\23\57\14\0\1\57\4\0\1\4"+
    "\1\32\1\4\2\32\61\0\1\60\73\0\1\61\40\0"+
    "\1\62\60\0\1\63\44\0\1\64\60\0\1\65\1\0"+
    "\1\66\56\0\1\67\55\0\1\70\21\0\2\43\2\0"+
    "\50\43\7\0\1\6\1\0\23\6\14\0\1\6\13\0"+
    "\4\6\1\71\17\6\12\0\1\6\1\0\1\6\1\44"+
    "\12\0\12\6\1\72\11\6\12\0\1\6\1\0\1\6"+
    "\1\44\12\0\5\6\1\73\16\6\12\0\1\6\1\0"+
    "\1\6\1\44\12\0\5\6\1\74\16\6\12\0\1\6"+
    "\1\0\1\6\1\44\12\0\5\6\1\75\16\6\12\0"+
    "\1\6\1\0\1\6\1\44\12\0\14\6\1\76\7\6"+
    "\12\0\1\6\1\0\1\6\1\44\12\0\3\6\1\77"+
    "\14\6\1\100\3\6\12\0\1\6\1\0\1\6\1\44"+
    "\12\0\6\6\1\101\15\6\12\0\1\6\1\0\1\6"+
    "\1\44\12\0\10\6\1\102\13\6\12\0\1\6\1\0"+
    "\1\6\1\44\47\0\2\56\1\103\14\0\24\57\12\0"+
    "\1\57\1\0\1\57\2\0\1\104\14\0\1\105\61\0"+
    "\1\106\46\0\1\107\53\0\1\110\53\0\1\111\62\0"+
    "\1\112\42\0\1\113\14\0\1\114\41\0\1\115\55\0"+
    "\1\116\43\0\5\6\1\117\16\6\12\0\1\6\1\0"+
    "\1\6\1\44\12\0\6\6\1\120\15\6\12\0\1\6"+
    "\1\0\1\6\1\44\12\0\10\6\1\121\13\6\12\0"+
    "\1\6\1\0\1\6\1\44\12\0\4\6\1\122\17\6"+
    "\12\0\1\6\1\0\1\6\1\44\12\0\7\6\1\123"+
    "\14\6\12\0\1\6\1\0\1\6\1\44\12\0\6\6"+
    "\1\121\15\6\12\0\1\6\1\0\1\6\1\44\12\0"+
    "\16\6\1\124\5\6\12\0\1\6\1\0\1\6\1\44"+
    "\12\0\10\6\1\125\13\6\12\0\1\6\1\0\1\6"+
    "\1\44\12\0\5\6\1\126\16\6\12\0\1\6\1\0"+
    "\1\6\1\44\12\0\17\6\1\127\4\6\12\0\1\6"+
    "\1\0\1\6\1\44\52\0\1\130\20\0\1\131\54\0"+
    "\1\132\55\0\1\133\47\0\1\134\56\0\1\135\52\0"+
    "\1\133\63\0\1\136\45\0\1\137\50\0\1\140\65\0"+
    "\1\141\34\0\6\6\1\142\15\6\12\0\1\6\1\0"+
    "\1\6\1\44\12\0\17\6\1\143\4\6\12\0\1\6"+
    "\1\0\1\6\1\44\12\0\3\6\1\144\20\6\12\0"+
    "\1\6\1\0\1\6\1\44\12\0\7\6\1\145\14\6"+
    "\12\0\1\6\1\0\1\6\1\44\12\0\7\6\1\146"+
    "\14\6\12\0\1\6\1\0\1\6\1\44\12\0\5\6"+
    "\1\147\16\6\12\0\1\6\1\0\1\6\1\44\12\0"+
    "\17\6\1\150\4\6\12\0\1\6\1\0\1\6\1\44"+
    "\12\0\10\6\1\151\13\6\12\0\1\6\1\0\1\6"+
    "\1\44\12\0\4\6\1\152\17\6\12\0\1\6\1\0"+
    "\1\6\1\44\12\0\1\153\34\0\2\154\23\0\1\155"+
    "\64\0\1\156\37\0\1\157\57\0\1\160\53\0\1\161"+
    "\51\0\1\162\65\0\1\163\44\0\1\164\47\0\1\165"+
    "\47\0\23\6\1\166\12\0\1\6\1\0\1\6\1\44"+
    "\12\0\11\6\1\142\12\6\12\0\1\6\1\0\1\6"+
    "\1\44\12\0\3\6\1\167\20\6\12\0\1\6\1\0"+
    "\1\6\1\44\12\0\10\6\1\170\13\6\12\0\1\6"+
    "\1\0\1\6\1\44\12\0\11\6\1\171\12\6\12\0"+
    "\1\6\1\0\1\6\1\44\12\0\3\6\1\172\20\6"+
    "\12\0\1\6\1\0\1\6\1\44\12\0\21\6\1\173"+
    "\2\6\12\0\1\6\1\0\1\6\1\44\47\0\2\174"+
    "\15\0\1\153\31\0\1\175\2\0\2\154\40\0\1\176"+
    "\41\0\1\155\45\0\1\177\60\0\1\200\54\0\1\201"+
    "\45\0\1\202\71\0\1\203\32\0\17\6\1\204\4\6"+
    "\12\0\1\6\1\0\1\6\1\44\12\0\17\6\1\205"+
    "\4\6\12\0\1\6\1\0\1\6\1\44\12\0\17\6"+
    "\1\142\4\6\12\0\1\6\1\0\1\6\1\44\12\0"+
    "\10\6\1\206\13\6\12\0\1\6\1\0\1\6\1\44"+
    "\12\0\6\6\1\170\15\6\12\0\1\6\1\0\1\6"+
    "\1\44\12\0\7\6\1\207\14\6\12\0\1\6\1\0"+
    "\1\6\1\44\44\0\1\175\2\0\2\174\34\0\1\210"+
    "\53\0\1\211\53\0\1\155\44\0\1\212\51\0\1\200"+
    "\54\0\1\213\44\0\4\6\1\214\17\6\12\0\1\6"+
    "\1\0\1\6\1\44\12\0\4\6\1\215\17\6\12\0"+
    "\1\6\1\0\1\6\1\44\12\0\17\6\1\216\4\6"+
    "\12\0\1\6\1\0\1\6\1\44\16\0\1\217\53\0"+
    "\1\220\66\0\1\221\34\0\10\6\1\222\13\6\12\0"+
    "\1\6\1\0\1\6\1\44\12\0\10\6\1\142\13\6"+
    "\12\0\1\6\1\0\1\6\1\44\12\0\21\6\1\142"+
    "\2\6\12\0\1\6\1\0\1\6\1\44\22\0\1\223"+
    "\53\0\1\155\64\0\1\155\32\0\7\6\1\224\14\6"+
    "\12\0\1\6\1\0\1\6\1\44\21\0\1\225\34\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5720];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\13\1\5\11\1\1\3\11\14\1\1\0"+
    "\11\1\13\0\12\1\1\0\1\11\12\0\11\1\12\0"+
    "\11\1\2\0\1\11\3\0\1\11\4\0\6\1\1\0"+
    "\1\11\6\0\4\1\3\0\1\11\3\1\3\0\1\1"+
    "\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[149];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  TirLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 20: break;
          case 2: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 21: break;
          case 3: 
            { yybegin(YYINITIAL); return TirTypes.IDENTIFIER;
            } 
            // fall through
          case 22: break;
          case 4: 
            { yybegin(YYINITIAL); return TirTypes.COMMA;
            } 
            // fall through
          case 23: break;
          case 5: 
            { yybegin(YYINITIAL); return TirTypes.SEMICOLON;
            } 
            // fall through
          case 24: break;
          case 6: 
            { yybegin(YYINITIAL); return TirTypes.EQUAL;
            } 
            // fall through
          case 25: break;
          case 7: 
            { yybegin(YYINITIAL); return TirTypes.LPAREN;
            } 
            // fall through
          case 26: break;
          case 8: 
            { yybegin(YYINITIAL); return TirTypes.RPAREN;
            } 
            // fall through
          case 27: break;
          case 9: 
            { yybegin(YYINITIAL); return TirTypes.LBRACKET;
            } 
            // fall through
          case 28: break;
          case 10: 
            { yybegin(YYINITIAL); return TirTypes.RBRACKET;
            } 
            // fall through
          case 29: break;
          case 11: 
            { yybegin(YYINITIAL); return TirTypes.LBRACE;
            } 
            // fall through
          case 30: break;
          case 12: 
            { yybegin(YYINITIAL); return TirTypes.RBRACE;
            } 
            // fall through
          case 31: break;
          case 13: 
            { yybegin(WAITING_VALUE); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 32: break;
          case 14: 
            { yybegin(YYINITIAL); return TirTypes.COMMENT;
            } 
            // fall through
          case 33: break;
          case 15: 
            { yybegin(YYINITIAL); return TirTypes.MODIFIER;
            } 
            // fall through
          case 34: break;
          case 16: 
            { yybegin(YYINITIAL); return TirTypes.CLASS;
            } 
            // fall through
          case 35: break;
          case 17: 
            { yybegin(YYINITIAL); return TirTypes.LINE_NUMBER;
            } 
            // fall through
          case 36: break;
          case 18: 
            { yybegin(YYINITIAL); return TirTypes.EXTENDS;
            } 
            // fall through
          case 37: break;
          case 19: 
            { yybegin(YYINITIAL); return TirTypes.IMPLEMENTS;
            } 
            // fall through
          case 38: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
